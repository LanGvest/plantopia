buildscript {
	repositories {
		maven {
			name = "Forge"
			url = "https://maven.minecraftforge.net"
		}
		maven {
			name = "Spongepowered"
			url = "https://repo.spongepowered.org/repository/maven-public"
		}
		maven {
			name = "Parchment"
			url = "https://maven.parchmentmc.org"
		}
		mavenCentral()
	}
	dependencies {
		classpath group: "net.minecraftforge.gradle", name: "ForgeGradle", version: forge_gradle_version, changing: true
		classpath group: "org.spongepowered", name: "mixingradle", version: mixin_gradle_version
		classpath group: "org.parchmentmc", name: "librarian", version: parchment_gradle_version
	}
}

apply plugin: "net.minecraftforge.gradle"
apply plugin: "org.spongepowered.mixin"
apply plugin: "org.parchmentmc.librarian.forgegradle"

JavaLanguageVersion JAVA_VERSION = JavaLanguageVersion.of(java_version)
SourceSet MAIN_SOURCE_SET = sourceSets.main
Set<String> FILES_TO_EXPAND = ["pack.mcmeta", "META-INF/mods.toml"]
String MAIN_RESOURCES_PATH = "src/main/resources"
String GENERATED_RESOURCES_PATH = "src/generated/resources"
String ACCESS_TRANSFORMER_PATH = "$MAIN_RESOURCES_PATH/META-INF/accesstransformer.cfg"
String DATA_PATH = data_package.replaceAll(/\./, "/")

ext {
	mixin_config = mod_id + ".mixins.json"
	mixin_refmap = mod_id + ".refmap.json"
	java_vm_version = System.getProperty("java.vm.version")
	java_vm_vendor = System.getProperty("java.vm.vendor")
}

println "$mod_name: $mod_version"
println "Forge: $forge_version"
println "Minecraft: $minecraft_version"
println "Java: $java_vm_version ($java_vm_vendor)"

version = mod_version
group = mod_maven_group
archivesBaseName = "$mod_archives_base_name-forge-$minecraft_version"

dependencies {
	minecraft "net.minecraftforge:forge:$minecraft_version-$forge_version"
	annotationProcessor "org.spongepowered:mixin:$mixin_processor_version:processor"
}

sourceSets {
	main {
		resources {
			srcDir GENERATED_RESOURCES_PATH
			exclude ".cache"
		}
	}
}

mixin {
	add MAIN_SOURCE_SET, mixin_refmap
	config mixin_config
}

minecraft {
	mappings channel: parchment_channel, version: parchment_version

	accessTransformer = file(ACCESS_TRANSFORMER_PATH)

	runs.configureEach {
		workingDirectory file("run")
		property "forge.logging.markers", "REGISTRIES"
		property "forge.logging.console.level", "debug"
		args "-mixin.config", mixin_config
		mods {
			"$mod_id" {
				source MAIN_SOURCE_SET
			}
		}
	}

	runs {
		client {
			taskName "runClient"
			property "forge.enabledGameTestNamespaces", mod_id
		}

		server {
			taskName "runServer"
			property "forge.enabledGameTestNamespaces", mod_id
		}

		data {
			taskName "generateData"
			args "--mod", mod_id, "--all", "--output", file(GENERATED_RESOURCES_PATH), "--existing", file(MAIN_RESOURCES_PATH)
		}
	}
}

java {
	sourceCompatibility = JAVA_VERSION
	targetCompatibility = JAVA_VERSION
	toolchain.languageVersion.set(JAVA_VERSION)
}

jar {
	finalizedBy "reobfJar"

	manifest {
		attributes "Specification-Title": mod_name
		attributes "Specification-Version": mod_version
		attributes "Specification-Vendor": mod_author
		attributes "Implementation-Title": mod_name
		attributes "Implementation-Version": mod_version
		attributes "Implementation-Vendor": mod_author
		attributes "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
		attributes "Timestamp": System.currentTimeMillis()
		attributes "Built-On-Forge": forge_version
		attributes "Built-On-Minecraft": minecraft_version
		attributes "Built-On-Java": "$java_vm_version ($java_vm_vendor)"
		attributes "MixinConfigs": mixin_config
	}

	from "LICENSE"
	exclude DATA_PATH
}

processResources {
	Properties properties = new Properties()

	file("gradle.properties").withInputStream {
		properties.load(it)
	}

	inputs.properties(properties)

	filesMatching(FILES_TO_EXPAND) {
		expand properties
	}
}

tasks.withType(JavaCompile).configureEach {
	options.encoding = "UTF-8"
	options.release.set(JAVA_VERSION.asInt())
}

tasks.withType(GenerateModuleMetadata).configureEach {
	enabled = false
}

tasks.withType(JavaExec).configureEach {
	if(name == minecraft.runs.data.taskName) {
		doLast {
			fileTree(GENERATED_RESOURCES_PATH).files.findAll {
				it.name.endsWith(".json")
			} each {
				it.text = it.text.replaceAll(/(?m)(?<=^\s{0,100}) {2}/, "\t")
				println "Reindent $it succeeded"
			}
		}
	}
}